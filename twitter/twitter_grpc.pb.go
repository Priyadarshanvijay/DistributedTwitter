// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: twitter.proto

package twitter

import (
	context "context"
	models "github.com/twitter/models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwitterClient is the client API for Twitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitterClient interface {
	HealthCheck(ctx context.Context, in *models.Empty, opts ...grpc.CallOption) (*models.Empty, error)
	RegisterUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.User, error)
	LoginUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.User, error)
	FollowUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.Empty, error)
	UnFollowUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.Empty, error)
	CreatePost(ctx context.Context, in *models.Post, opts ...grpc.CallOption) (*models.Post, error)
	GetFeed(ctx context.Context, in *models.Empty, opts ...grpc.CallOption) (*models.MultiplePosts, error)
	DeletePost(ctx context.Context, in *models.Post, opts ...grpc.CallOption) (*models.Empty, error)
	GetUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.User, error)
	GetUserProfile(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.UserProfile, error)
	GetSelf(ctx context.Context, in *models.Empty, opts ...grpc.CallOption) (*models.User, error)
	GetMyPosts(ctx context.Context, in *models.Empty, opts ...grpc.CallOption) (*models.MultiplePosts, error)
	GetPost(ctx context.Context, in *models.Post, opts ...grpc.CallOption) (*models.Post, error)
}

type twitterClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitterClient(cc grpc.ClientConnInterface) TwitterClient {
	return &twitterClient{cc}
}

func (c *twitterClient) HealthCheck(ctx context.Context, in *models.Empty, opts ...grpc.CallOption) (*models.Empty, error) {
	out := new(models.Empty)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) RegisterUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.User, error) {
	out := new(models.User)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) LoginUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.User, error) {
	out := new(models.User)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) FollowUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.Empty, error) {
	out := new(models.Empty)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/FollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) UnFollowUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.Empty, error) {
	out := new(models.Empty)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/UnFollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) CreatePost(ctx context.Context, in *models.Post, opts ...grpc.CallOption) (*models.Post, error) {
	out := new(models.Post)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetFeed(ctx context.Context, in *models.Empty, opts ...grpc.CallOption) (*models.MultiplePosts, error) {
	out := new(models.MultiplePosts)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) DeletePost(ctx context.Context, in *models.Post, opts ...grpc.CallOption) (*models.Empty, error) {
	out := new(models.Empty)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetUser(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.User, error) {
	out := new(models.User)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetUserProfile(ctx context.Context, in *models.User, opts ...grpc.CallOption) (*models.UserProfile, error) {
	out := new(models.UserProfile)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetSelf(ctx context.Context, in *models.Empty, opts ...grpc.CallOption) (*models.User, error) {
	out := new(models.User)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/GetSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetMyPosts(ctx context.Context, in *models.Empty, opts ...grpc.CallOption) (*models.MultiplePosts, error) {
	out := new(models.MultiplePosts)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/GetMyPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetPost(ctx context.Context, in *models.Post, opts ...grpc.CallOption) (*models.Post, error) {
	out := new(models.Post)
	err := c.cc.Invoke(ctx, "/twitter.Twitter/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitterServer is the server API for Twitter service.
// All implementations must embed UnimplementedTwitterServer
// for forward compatibility
type TwitterServer interface {
	HealthCheck(context.Context, *models.Empty) (*models.Empty, error)
	RegisterUser(context.Context, *models.User) (*models.User, error)
	LoginUser(context.Context, *models.User) (*models.User, error)
	FollowUser(context.Context, *models.User) (*models.Empty, error)
	UnFollowUser(context.Context, *models.User) (*models.Empty, error)
	CreatePost(context.Context, *models.Post) (*models.Post, error)
	GetFeed(context.Context, *models.Empty) (*models.MultiplePosts, error)
	DeletePost(context.Context, *models.Post) (*models.Empty, error)
	GetUser(context.Context, *models.User) (*models.User, error)
	GetUserProfile(context.Context, *models.User) (*models.UserProfile, error)
	GetSelf(context.Context, *models.Empty) (*models.User, error)
	GetMyPosts(context.Context, *models.Empty) (*models.MultiplePosts, error)
	GetPost(context.Context, *models.Post) (*models.Post, error)
	mustEmbedUnimplementedTwitterServer()
}

// UnimplementedTwitterServer must be embedded to have forward compatible implementations.
type UnimplementedTwitterServer struct {
}

func (UnimplementedTwitterServer) HealthCheck(context.Context, *models.Empty) (*models.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTwitterServer) RegisterUser(context.Context, *models.User) (*models.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedTwitterServer) LoginUser(context.Context, *models.User) (*models.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedTwitterServer) FollowUser(context.Context, *models.User) (*models.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedTwitterServer) UnFollowUser(context.Context, *models.User) (*models.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollowUser not implemented")
}
func (UnimplementedTwitterServer) CreatePost(context.Context, *models.Post) (*models.Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedTwitterServer) GetFeed(context.Context, *models.Empty) (*models.MultiplePosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedTwitterServer) DeletePost(context.Context, *models.Post) (*models.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedTwitterServer) GetUser(context.Context, *models.User) (*models.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedTwitterServer) GetUserProfile(context.Context, *models.User) (*models.UserProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedTwitterServer) GetSelf(context.Context, *models.Empty) (*models.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelf not implemented")
}
func (UnimplementedTwitterServer) GetMyPosts(context.Context, *models.Empty) (*models.MultiplePosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPosts not implemented")
}
func (UnimplementedTwitterServer) GetPost(context.Context, *models.Post) (*models.Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedTwitterServer) mustEmbedUnimplementedTwitterServer() {}

// UnsafeTwitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitterServer will
// result in compilation errors.
type UnsafeTwitterServer interface {
	mustEmbedUnimplementedTwitterServer()
}

func RegisterTwitterServer(s grpc.ServiceRegistrar, srv TwitterServer) {
	s.RegisterService(&Twitter_ServiceDesc, srv)
}

func _Twitter_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).HealthCheck(ctx, req.(*models.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).RegisterUser(ctx, req.(*models.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).LoginUser(ctx, req.(*models.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/FollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).FollowUser(ctx, req.(*models.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_UnFollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).UnFollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/UnFollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).UnFollowUser(ctx, req.(*models.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).CreatePost(ctx, req.(*models.Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetFeed(ctx, req.(*models.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).DeletePost(ctx, req.(*models.Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetUser(ctx, req.(*models.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetUserProfile(ctx, req.(*models.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/GetSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetSelf(ctx, req.(*models.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetMyPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetMyPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/GetMyPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetMyPosts(ctx, req.(*models.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.Twitter/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetPost(ctx, req.(*models.Post))
	}
	return interceptor(ctx, in, info, handler)
}

// Twitter_ServiceDesc is the grpc.ServiceDesc for Twitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Twitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twitter.Twitter",
	HandlerType: (*TwitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Twitter_HealthCheck_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Twitter_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Twitter_LoginUser_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _Twitter_FollowUser_Handler,
		},
		{
			MethodName: "UnFollowUser",
			Handler:    _Twitter_UnFollowUser_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Twitter_CreatePost_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _Twitter_GetFeed_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Twitter_DeletePost_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Twitter_GetUser_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Twitter_GetUserProfile_Handler,
		},
		{
			MethodName: "GetSelf",
			Handler:    _Twitter_GetSelf_Handler,
		},
		{
			MethodName: "GetMyPosts",
			Handler:    _Twitter_GetMyPosts_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _Twitter_GetPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twitter.proto",
}
